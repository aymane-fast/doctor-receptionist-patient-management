<?php

namespace App\Services;

use App\Models\Patient;
use App\Models\Appointment;
use App\Models\MedicalRecord;
use App\Models\Prescription;
use App\Models\PrescriptionItem;
use App\Models\Order;
use App\Models\User;
use App\Models\Setting;
use Carbon\Carbon;
use Illuminate\Support\Facades\Response;

class ClinicDataExportService
{
    /**
     * Export all clinic data to a comprehensive CSV file
     */
    public function exportAllData()
    {
        $timestamp = Carbon::now()->format('Y-m-d_H-i-s');
        $filename = "clinic_complete_export_{$timestamp}.csv";
        $tempDir = storage_path('app/temp');
        
        // Create temp directory if it doesn't exist
        if (!file_exists($tempDir)) {
            mkdir($tempDir, 0755, true);
        }
        
        $filePath = $tempDir . '/' . $filename;
        $file = fopen($filePath, 'w');
        
        // Add BOM for UTF-8
        fwrite($file, "\xEF\xBB\xBF");
        
        // Write all data sections to single file
        $this->writeOverviewSection($file);
        $this->writePatientsSection($file);
        $this->writeAppointmentsSection($file);
        $this->writeMedicalRecordsSection($file);
        $this->writePrescriptionsSection($file);
        $this->writeOrdersSection($file);
        $this->writeStatisticsSection($file);
        
        fclose($file);
        
        return $filePath;
    }
    
    /**
     * Write overview section to file
     */
    private function writeOverviewSection($file)
    {
        $clinicName = Setting::get('clinic_name', 'Medical Clinic');
        
        // Main header with decorative borders
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                           📋 CLINIC DATA EXPORT REPORT                           ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        
        // Clinic information section
        fputcsv($file, ['🏥 CLINIC INFORMATION', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '']);
        fputcsv($file, ['Clinic Name:', $clinicName]);
        fputcsv($file, ['Export Generated:', Carbon::now()->format('F j, Y \a\t g:i A')]);
        fputcsv($file, ['Export Type:', 'Complete Database Export']);
        fputcsv($file, ['Generated By:', 'Clinic Management System']);
        fputcsv($file, ['']);
        
        // Summary statistics with improved formatting
        fputcsv($file, ['📊 DATA SUMMARY STATISTICS', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '']);
        fputcsv($file, ['Data Category', 'Count', 'Description']);
        fputcsv($file, ['═══════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['👥 Patients', Patient::count(), 'Total registered patients']);
        fputcsv($file, ['📅 Appointments (Total)', Appointment::count(), 'All appointments scheduled']);
        fputcsv($file, ['✅ Completed Appointments', Appointment::where('status', 'completed')->count(), 'Successfully completed']);
        fputcsv($file, ['⏳ Pending Appointments', Appointment::where('status', 'scheduled')->count(), 'Awaiting completion']);
        fputcsv($file, ['❌ Cancelled Appointments', Appointment::where('status', 'cancelled')->count(), 'Cancelled by patient/clinic']);
        fputcsv($file, ['🏥 Medical Records', MedicalRecord::count(), 'Complete medical histories']);
        fputcsv($file, ['💊 Prescriptions', Prescription::count(), 'Medications prescribed']);
        fputcsv($file, ['🧪 Lab Orders', Order::count(), 'Laboratory test orders']);
        fputcsv($file, ['👨‍⚕️ Active Doctors', User::where('role', 'doctor')->count(), 'Medical staff members']);
        fputcsv($file, ['']);
        
        // Date ranges with better formatting
        fputcsv($file, ['📅 OPERATIONAL DATE RANGES', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '']);
        fputcsv($file, ['Metric', 'Date', 'Notes']);
        fputcsv($file, ['═══════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['First Patient Registration', optional(Patient::oldest()->first())->created_at?->format('M j, Y') ?? 'No data', 'Clinic operational start']);
        fputcsv($file, ['First Appointment Scheduled', optional(optional(Appointment::oldest()->first())->appointment_date)?->format('M j, Y') ?? 'No data', 'First booking recorded']);
        fputcsv($file, ['Latest Appointment Date', optional(optional(Appointment::latest('appointment_date')->first())->appointment_date)?->format('M j, Y') ?? 'No data', 'Most recent booking']);
        fputcsv($file, ['Export Generation Date', Carbon::now()->format('M j, Y'), 'Report creation timestamp']);
        fputcsv($file, ['']);
        
        // Contact information
        fputcsv($file, ['📞 CLINIC CONTACT INFORMATION', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '']);
        fputcsv($file, ['Contact Type', 'Details']);
        fputcsv($file, ['═══════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['🏢 Address', Setting::get('clinic_address', 'Not specified')]);
        fputcsv($file, ['📞 Phone', Setting::get('clinic_phone', 'Not specified')]);
        fputcsv($file, ['✉️ Email', Setting::get('clinic_email', 'Not specified')]);
        fputcsv($file, ['🌐 Website', Setting::get('clinic_website', 'Not specified')]);
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        fputcsv($file, ['']);
    }
    
    /**
     * Write patients section to file
     */
    private function writePatientsSection($file)
    {
        // Enhanced section header
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                               👥 PATIENT DATABASE                               ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['Total Patients: ' . Patient::count() . ' | Export Date: ' . Carbon::now()->format('M j, Y g:i A')]);
        fputcsv($file, ['']);
        
        // Enhanced headers with better descriptions
        $headers = [
            '🆔 Patient ID',
            '👤 First Name', 
            '👤 Last Name', 
            '🎂 Birth Date', 
            '📅 Age', 
            '⚥ Gender',
            '📞 Phone Number', 
            '✉️ Email Address', 
            '🏠 Full Address', 
            '🆔 ID Card Number', 
            '⚠️ Known Allergies',
            '🏥 Chronic Conditions', 
            '🚨 Emergency Contact', 
            '📞 Emergency Phone',
            '📊 Total Appointments', 
            '📅 Last Appointment', 
            '📝 Registration Date'
        ];
        
        fputcsv($file, $headers);
        fputcsv($file, ['─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────']);
        
        // Get patients with enhanced data
        $patients = Patient::with(['appointments' => function($query) {
            $query->orderBy('appointment_date', 'desc');
        }])->orderBy('created_at', 'desc')->get();
        
        foreach ($patients as $patient) {
            $lastAppointment = $patient->appointments->first();
            
            $row = [
                $patient->patient_id,
                $patient->first_name,
                $patient->last_name,
                optional($patient->birth_date)->format('Y-m-d') ?? 'Not specified',
                $patient->age . ' years',
                ucfirst($patient->gender ?? 'Not specified'),
                $patient->phone ?? 'Not provided',
                $patient->email ?? 'Not provided',
                $patient->address ?? 'Not provided',
                $patient->id_card_number ?? 'Not provided',
                $patient->allergies ?? 'None reported',
                $patient->chronic_conditions ?? 'None reported',
                $patient->emergency_contact_name ?? 'Not provided',
                $patient->emergency_contact_phone ?? 'Not provided',
                $patient->appointments->count() . ' appointment(s)',
                optional($lastAppointment)->appointment_date?->format('M j, Y') ?? 'No appointments',
                $patient->created_at->format('M j, Y g:i A')
            ];
            
            fputcsv($file, $row);
        }
        
        // Section footer with statistics
        fputcsv($file, ['']);
        fputcsv($file, ['💡 PATIENT SUMMARY STATISTICS:', '']);
        fputcsv($file, ['├─ Total Patients:', Patient::count()]);
        fputcsv($file, ['├─ Male Patients:', Patient::where('gender', 'male')->count()]);
        fputcsv($file, ['├─ Female Patients:', Patient::where('gender', 'female')->count()]);
        fputcsv($file, ['└─ Patients with Emergency Contacts:', Patient::whereNotNull('emergency_contact_name')->count()]);
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        fputcsv($file, ['']);
    }
    
    /**
     * Write appointments section to file
     */
    private function writeAppointmentsSection($file)
    {
        // Enhanced section header
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                            📅 APPOINTMENTS SCHEDULE                            ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['Total Appointments: ' . Appointment::count() . ' | Last Updated: ' . Carbon::now()->format('M j, Y g:i A')]);
        fputcsv($file, ['']);
        
        // Enhanced headers
        $headers = [
            '🆔 Appointment ID',
            '👤 Patient ID', 
            '👥 Patient Name', 
            '👨‍⚕️ Doctor Name',
            '📅 Appointment Date', 
            '⏰ Time Slot', 
            '📊 Status', 
            '📝 Reason/Complaint',
            '📋 Additional Notes', 
            '⭐ Current Session', 
            '📝 Created On'
        ];
        
        fputcsv($file, $headers);
        fputcsv($file, ['─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────']);
        
        // Get appointments with enhanced formatting
        $appointments = Appointment::with(['patient', 'doctor'])
                                  ->orderBy('appointment_date', 'desc')
                                  ->orderBy('appointment_time', 'desc')
                                  ->get();
        
        foreach ($appointments as $appointment) {
            // Enhanced status display
            $statusDisplay = match($appointment->status) {
                'completed' => '✅ Completed',
                'scheduled' => '⏳ Scheduled',
                'cancelled' => '❌ Cancelled',
                'no-show' => '🚫 No Show',
                default => '❓ ' . ucfirst($appointment->status)
            };
            
            $row = [
                'APT-' . str_pad($appointment->id, 6, '0', STR_PAD_LEFT),
                $appointment->patient->patient_id,
                $appointment->patient->full_name,
                $appointment->doctor->name ?? '👨‍⚕️ Not assigned',
                optional($appointment->appointment_date)->format('D, M j, Y') ?? 'Not scheduled',
                optional($appointment->appointment_time)->format('g:i A') ?? 'Time TBD',
                $statusDisplay,
                $appointment->reason ?? 'General consultation',
                $appointment->notes ?? 'No additional notes',
                $appointment->is_current ? '⭐ Current' : '📋 Past/Future',
                $appointment->created_at->format('M j, Y g:i A')
            ];
            
            fputcsv($file, $row);
        }
        
        // Section footer with statistics
        fputcsv($file, ['']);
        fputcsv($file, ['💡 APPOINTMENT STATISTICS:', '']);
        fputcsv($file, ['├─ Total Appointments:', Appointment::count()]);
        fputcsv($file, ['├─ ✅ Completed:', Appointment::where('status', 'completed')->count()]);
        fputcsv($file, ['├─ ⏳ Scheduled/Pending:', Appointment::where('status', 'scheduled')->count()]);
        fputcsv($file, ['├─ ❌ Cancelled:', Appointment::where('status', 'cancelled')->count()]);
        fputcsv($file, ['└─ 📅 This Month:', Appointment::whereMonth('appointment_date', Carbon::now()->month)->count()]);
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        fputcsv($file, ['']);
    }
    
    /**
     * Write medical records section to file
     */
    private function writeMedicalRecordsSection($file)
    {
        // Enhanced section header
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                           🏥 MEDICAL RECORDS DATABASE                          ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['Total Records: ' . MedicalRecord::count() . ' | Confidential Medical Data | Generated: ' . Carbon::now()->format('M j, Y g:i A')]);
        fputcsv($file, ['']);
        
        // Enhanced headers with medical focus
        $headers = [
            '🆔 Record ID',
            '👤 Patient ID', 
            '👥 Patient Name', 
            '👨‍⚕️ Attending Doctor', 
            '📅 Visit Date',
            '🤒 Reported Symptoms', 
            '🔍 Medical Diagnosis', 
            '💊 Treatment Plan', 
            '⚖️ Weight (kg)', 
            '📏 Height (cm)',
            '🩸 Blood Pressure', 
            '🌡️ Temperature (°C)', 
            '💓 Heart Rate (bpm)', 
            '📝 Clinical Notes'
        ];
        
        fputcsv($file, $headers);
        fputcsv($file, ['─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────']);
        
        // Get medical records with enhanced formatting
        $records = MedicalRecord::with(['patient', 'doctor'])
                               ->orderBy('visit_date', 'desc')
                               ->get();
        
        foreach ($records as $record) {
            $row = [
                'MR-' . str_pad($record->id, 6, '0', STR_PAD_LEFT),
                $record->patient->patient_id,
                $record->patient->full_name,
                $record->doctor->name ?? '👨‍⚕️ Doctor not specified',
                optional($record->visit_date)->format('D, M j, Y') ?? 'Date not recorded',
                $record->symptoms ?? 'No symptoms recorded',
                $record->diagnosis ?? 'Diagnosis pending',
                $record->treatment ?? 'Treatment plan not specified',
                $record->weight ? $record->weight . ' kg' : 'Not measured',
                $record->height ? $record->height . ' cm' : 'Not measured',
                $record->blood_pressure ?? 'Not taken',
                $record->temperature ? $record->temperature . '°C' : 'Not taken',
                $record->heart_rate ? $record->heart_rate . ' bpm' : 'Not measured',
                $record->notes ?? 'No additional clinical notes'
            ];
            
            fputcsv($file, $row);
        }
        
        // Section footer with medical statistics
        fputcsv($file, ['']);
        fputcsv($file, ['💡 MEDICAL RECORDS STATISTICS:', '']);
        fputcsv($file, ['├─ Total Medical Records:', MedicalRecord::count()]);
        fputcsv($file, ['├─ Records with Vital Signs:', MedicalRecord::whereNotNull(['weight', 'height', 'blood_pressure'])->count()]);
        fputcsv($file, ['├─ Records with Diagnosis:', MedicalRecord::whereNotNull('diagnosis')->count()]);
        fputcsv($file, ['├─ Recent Records (Last 30 days):', MedicalRecord::where('visit_date', '>=', Carbon::now()->subDays(30))->count()]);
        fputcsv($file, ['└─ Records with Treatment Plans:', MedicalRecord::whereNotNull('treatment')->count()]);
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        fputcsv($file, ['']);
    }
    
    /**
     * Write prescriptions section to file
     */
    private function writePrescriptionsSection($file)
    {
        // Enhanced section header
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                           💊 PRESCRIPTION DATABASE                             ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['Total Prescriptions: ' . Prescription::count() . ' | Pharmacy Records | Generated: ' . Carbon::now()->format('M j, Y g:i A')]);
        fputcsv($file, ['']);
        
        // Enhanced headers with pharmaceutical focus
        $headers = [
            '🆔 Prescription ID',
            '👤 Patient ID', 
            '👥 Patient Name', 
            '👨‍⚕️ Prescribing Doctor',
            '📅 Prescribed Date', 
            '💊 Medication Name', 
            '⚖️ Dosage Strength', 
            '⏰ Frequency',
            '📅 Duration (Days)', 
            '📋 Instructions', 
            '📝 Clinical Notes'
        ];
        
        fputcsv($file, $headers);
        fputcsv($file, ['─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────']);
        
        // Get prescriptions with enhanced formatting
        $prescriptions = Prescription::with(['patient', 'doctor', 'items'])
                                   ->orderBy('prescribed_date', 'desc')
                                   ->get();
        
        foreach ($prescriptions as $prescription) {
            // If prescription has items, list each item separately
            if ($prescription->items->count() > 0) {
                foreach ($prescription->items as $item) {
                    $row = [
                        'RX-' . str_pad($prescription->id, 6, '0', STR_PAD_LEFT),
                        $prescription->patient->patient_id,
                        $prescription->patient->full_name,
                        $prescription->doctor->name ?? '👨‍⚕️ Doctor not specified',
                        optional($prescription->prescribed_date)->format('D, M j, Y') ?? 'Date not recorded',
                        $item->medication_name ?? 'Medication not specified',
                        $item->dosage ?? 'Dosage not specified',
                        $item->frequency ?? 'Frequency not specified',
                        $item->duration_days ? $item->duration_days . ' days' : 'Duration not specified',
                        $item->instructions ?? 'No specific instructions',
                        $prescription->notes ?? 'No additional notes'
                    ];
                    fputcsv($file, $row);
                }
            } else {
                // Legacy single prescription format
                $row = [
                    'RX-' . str_pad($prescription->id, 6, '0', STR_PAD_LEFT),
                    $prescription->patient->patient_id,
                    $prescription->patient->full_name,
                    $prescription->doctor->name ?? '👨‍⚕️ Doctor not specified',
                    optional($prescription->prescribed_date)->format('D, M j, Y') ?? 'Date not recorded',
                    $prescription->medication_name ?? 'Medication not specified',
                    $prescription->dosage ?? 'Dosage not specified',
                    $prescription->frequency ?? 'Frequency not specified',
                    $prescription->duration_days ? $prescription->duration_days . ' days' : 'Duration not specified',
                    $prescription->instructions ?? 'No specific instructions',
                    $prescription->notes ?? 'No additional notes'
                ];
                fputcsv($file, $row);
            }
        }
        
        // Section footer with pharmaceutical statistics
        fputcsv($file, ['']);
        fputcsv($file, ['💡 PRESCRIPTION STATISTICS:', '']);
        fputcsv($file, ['├─ Total Prescriptions:', Prescription::count()]);
        fputcsv($file, ['├─ Recent Prescriptions (Last 30 days):', Prescription::where('prescribed_date', '>=', Carbon::now()->subDays(30))->count()]);
        fputcsv($file, ['├─ Prescriptions with Detailed Items:', Prescription::has('items')->count()]);
        fputcsv($file, ['├─ Total Medication Items:', \App\Models\PrescriptionItem::count()]);
        fputcsv($file, ['└─ Patients with Active Prescriptions:', Prescription::distinct('patient_id')->count()]);
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        fputcsv($file, ['']);
    }
    
    /**
     * Write orders section to file
     */
    private function writeOrdersSection($file)
    {
        // Enhanced section header
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                           🧪 LABORATORY ORDERS DATABASE                        ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['Total Orders: ' . Order::count() . ' | Lab Testing Records | Generated: ' . Carbon::now()->format('M j, Y g:i A')]);
        fputcsv($file, ['']);
        
        // Enhanced headers with laboratory focus
        $headers = [
            '🆔 Order ID',
            '👤 Patient ID', 
            '👥 Patient Name', 
            '👨‍⚕️ Ordering Doctor',
            '🧪 Order Type', 
            '🔬 Test/Procedure Name', 
            '📅 Requested Date', 
            '📊 Current Status', 
            '📝 Special Instructions'
        ];
        
        fputcsv($file, $headers);
        fputcsv($file, ['─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────']);
        
        // Get orders with enhanced formatting
        $orders = Order::with(['patient', 'doctor'])
                      ->orderBy('requested_date', 'desc')
                      ->get();
        
        foreach ($orders as $order) {
            // Enhanced status display
            $statusDisplay = match($order->status) {
                'pending' => '⏳ Pending',
                'completed' => '✅ Completed',
                'cancelled' => '❌ Cancelled',
                'in-progress' => '🔄 In Progress',
                'results-ready' => '📋 Results Ready',
                default => '❓ ' . ucfirst($order->status)
            };
            
            // Enhanced order type display
            $orderTypeDisplay = match($order->order_type) {
                'blood_test' => '🩸 Blood Test',
                'urine_test' => '🧪 Urine Analysis',
                'imaging' => '📷 Medical Imaging',
                'biopsy' => '🔬 Biopsy',
                'culture' => '🦠 Culture Test',
                default => '🧪 ' . ucfirst(str_replace('_', ' ', $order->order_type))
            };
            
            $row = [
                'ORD-' . str_pad($order->id, 6, '0', STR_PAD_LEFT),
                $order->patient->patient_id,
                $order->patient->full_name,
                $order->doctor->name ?? '👨‍⚕️ Doctor not specified',
                $orderTypeDisplay,
                $order->test_name ?? 'Test not specified',
                optional($order->requested_date)->format('D, M j, Y') ?? 'Date not recorded',
                $statusDisplay,
                $order->notes ?? 'No special instructions'
            ];
            
            fputcsv($file, $row);
        }
        
        // Section footer with laboratory statistics
        fputcsv($file, ['']);
        fputcsv($file, ['💡 LABORATORY ORDER STATISTICS:', '']);
        fputcsv($file, ['├─ Total Lab Orders:', Order::count()]);
        fputcsv($file, ['├─ ⏳ Pending Orders:', Order::where('status', 'pending')->count()]);
        fputcsv($file, ['├─ ✅ Completed Orders:', Order::where('status', 'completed')->count()]);
        fputcsv($file, ['├─ 📅 Recent Orders (Last 30 days):', Order::where('requested_date', '>=', Carbon::now()->subDays(30))->count()]);
        fputcsv($file, ['└─ 👥 Patients with Orders:', Order::distinct('patient_id')->count()]);
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['']);
        fputcsv($file, ['']);
    }
    
    /**
     * Write statistics section to file
     */
    private function writeStatisticsSection($file)
    {
        // Enhanced section header
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                         📊 CLINIC ANALYTICS & STATISTICS                       ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['Comprehensive Data Analysis | Generated: ' . Carbon::now()->format('M j, Y g:i A')]);
        fputcsv($file, ['']);
        
        // Monthly appointment statistics with enhanced formatting
        fputcsv($file, ['📅 MONTHLY APPOINTMENT TRENDS', '', '', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '', '', '']);
        fputcsv($file, ['📆 Month/Year', '📊 Total Booked', '✅ Completed', '❌ Cancelled', '📈 Success Rate']);
        fputcsv($file, ['═══════════════════════════════════════════════════════════════════════════════']);
        
        $monthlyStats = Appointment::selectRaw('
            YEAR(appointment_date) as year,
            MONTH(appointment_date) as month,
            COUNT(*) as total_appointments,
            SUM(CASE WHEN status = "completed" THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = "cancelled" THEN 1 ELSE 0 END) as cancelled
        ')
        ->groupBy('year', 'month')
        ->orderBy('year', 'desc')
        ->orderBy('month', 'desc')
        ->get();
        
        foreach ($monthlyStats as $stat) {
            $monthName = Carbon::create($stat->year, $stat->month, 1)->format('M Y');
            $successRate = $stat->total_appointments > 0 ? round(($stat->completed / $stat->total_appointments) * 100, 1) . '%' : '0%';
            fputcsv($file, [$monthName, $stat->total_appointments, $stat->completed, $stat->cancelled, $successRate]);
        }
        
        fputcsv($file, ['']);
        fputcsv($file, ['']);
        
        // Patient demographics with enhanced formatting
        fputcsv($file, ['👥 PATIENT DEMOGRAPHICS ANALYSIS', '', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '', '']);
        fputcsv($file, ['📊 Category', '👥 Count', '📈 Percentage']);
        fputcsv($file, ['═══════════════════════════════════════════════════════════════════════════════']);
        
        $totalPatients = Patient::count();
        
        // Gender distribution
        fputcsv($file, ['🚻 GENDER DISTRIBUTION:', '', '']);
        $genderStats = Patient::selectRaw('gender, COUNT(*) as count')
                             ->groupBy('gender')
                             ->get();
        
        foreach ($genderStats as $stat) {
            $percentage = $totalPatients > 0 ? round(($stat->count / $totalPatients) * 100, 1) . '%' : '0%';
            $genderEmoji = $stat->gender === 'male' ? '👨' : ($stat->gender === 'female' ? '👩' : '👤');
            fputcsv($file, [$genderEmoji . ' ' . ucfirst($stat->gender), $stat->count, $percentage]);
        }
        
        fputcsv($file, ['']);
        
        // Age groups with enhanced formatting
        fputcsv($file, ['📅 AGE GROUP DISTRIBUTION:', '', '']);
        
        $ageGroups = [
            '👶 0-17 years (Pediatric)' => Patient::whereRaw('TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 0 AND 17')->count(),
            '🧑 18-35 years (Young Adults)' => Patient::whereRaw('TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 18 AND 35')->count(),
            '👩‍💼 36-55 years (Middle-aged)' => Patient::whereRaw('TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 36 AND 55')->count(),
            '👴 56-75 years (Senior)' => Patient::whereRaw('TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 56 AND 75')->count(),
            '👵 75+ years (Elderly)' => Patient::whereRaw('TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) > 75')->count(),
        ];
        
        foreach ($ageGroups as $ageGroup => $count) {
            $percentage = $totalPatients > 0 ? round(($count / $totalPatients) * 100, 1) . '%' : '0%';
            fputcsv($file, [$ageGroup, $count, $percentage]);
        }
        
        fputcsv($file, ['']);
        fputcsv($file, ['']);
        
        // Additional clinic insights
        fputcsv($file, ['💡 CLINIC PERFORMANCE INSIGHTS', '', '']);
        fputcsv($file, ['─────────────────────────────────────────────────────────', '', '']);
        fputcsv($file, ['📊 Metric', '📈 Value', '📝 Notes']);
        fputcsv($file, ['═══════════════════════════════════════════════════════════════════════════════']);
        
        $insights = [
            ['👥 Patient Retention Rate', Patient::whereHas('appointments', function($q) { $q->where('status', 'completed'); })->count() . '/' . $totalPatients . ' patients', 'Patients with completed visits'],
            ['📅 Average Monthly Appointments', round(Appointment::count() / max(1, Carbon::now()->diffInMonths(Appointment::oldest()->first()?->created_at ?? Carbon::now())), 1), 'Based on clinic operation period'],
            ['⭐ Current Active Cases', Appointment::where('is_current', true)->count(), 'Ongoing patient sessions'],
            ['💊 Prescription Compliance', Prescription::whereNotNull('instructions')->count() . '/' . Prescription::count(), 'Detailed prescription records'],
            ['🔬 Lab Order Completion', Order::where('status', 'completed')->count() . '/' . Order::count(), 'Successfully completed tests'],
            ['📋 Records with Vitals', MedicalRecord::whereNotNull(['weight', 'height'])->count() . '/' . MedicalRecord::count(), 'Complete vital sign records'],
        ];
        
        foreach ($insights as $insight) {
            fputcsv($file, $insight);
        }
        
        fputcsv($file, ['']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
        fputcsv($file, ['                           📋 END OF CLINIC DATA EXPORT                         ']);
        fputcsv($file, ['                    Generated by Clinic Management System v1.0                  ']);
        fputcsv($file, ['                        Export Date: ' . Carbon::now()->format('F j, Y g:i A') . '                        ']);
        fputcsv($file, ['════════════════════════════════════════════════════════════════════════════════']);
    }
}